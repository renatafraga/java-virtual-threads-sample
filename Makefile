# =============================================================================
# Virtual Threads Performance Benchmark - Makefile Simplificado
# =============================================================================

# Configura√ß√µes
SHELL := /bin/zsh
.DEFAULT_GOAL := help
.PHONY: help build benchmark benchmark-fast benchmark-load report clean-reports

# Cores para output
CYAN := \033[0;36m
EMERALD := \033[38;5;46m
AMBER := \033[38;5;214m
RED := \033[0;31m
SILVER := \033[38;5;245m
NC := \033[0m

# Vari√°veis
JAR_FILE := build/libs/java-virtual-threads-sample-0.0.1-SNAPSHOT.jar
BENCHMARK_SCRIPT := ./performance-benchmark.sh
LATEST_REPORT := $(shell ls -t performance-report-*.txt 2>/dev/null | head -1)

# =============================================================================
# AJUDA
# =============================================================================

## üìã Exibir comandos dispon√≠veis
help:
	@echo "$(CYAN)üöÄ Virtual Threads Performance Benchmark$(NC)"
	@echo "=============================================="
	@echo ""
	@echo "$(EMERALD)üìä BENCHMARKS:$(NC)"
	@echo "  make benchmark      - Benchmark completo (20 requests, 100 concurrent)"
	@echo "  make benchmark-fast - Benchmark r√°pido (10 requests, 50 concurrent)"
	@echo "  make benchmark-load - Benchmark alta carga (30 requests, 200 concurrent)"
	@echo ""
	@echo "$(AMBER)üìÑ RELAT√ìRIOS:$(NC)"
	@echo "  make report         - Visualizar √∫ltimo relat√≥rio"
	@echo "  make clean-reports  - Limpar relat√≥rios antigos"
	@echo ""
	@echo "$(SILVER)üîß PREPARA√á√ÉO:$(NC)"
	@echo "  make build          - Compilar o projeto"

# =============================================================================
# BUILD
# =============================================================================

## üî® Compilar o projeto
build:
	@echo "$(CYAN)üî® Compilando projeto...$(NC)"
	@./gradlew clean build -x test
	@echo "$(EMERALD)‚úÖ Projeto compilado$(NC)"

# =============================================================================
# BENCHMARKS
# =============================================================================

## üìä Benchmark completo (configura√ß√£o padr√£o)
benchmark: build
	@echo "$(CYAN)üìä Executando benchmark completo...$(NC)"
	@echo "$(SILVER)‚öôÔ∏è  Configura√ß√£o: 20 requests, 100 concurrent$(NC)"
	@$(BENCHMARK_SCRIPT) simple
	@make _show-summary

## ‚ö° Benchmark r√°pido (menos requisi√ß√µes)
benchmark-fast: build
	@echo "$(CYAN)‚ö° Executando benchmark r√°pido...$(NC)"
	@echo "$(SILVER)‚öôÔ∏è  Configura√ß√£o: 10 requests, 50 concurrent$(NC)"
	@TEST_REQUESTS=10 CONCURRENT_REQUESTS=50 $(BENCHMARK_SCRIPT) simple
	@make _show-summary

## üöÄ Benchmark com alta carga
benchmark-load: build
	@echo "$(CYAN)üöÄ Executando benchmark de alta carga...$(NC)"
	@echo "$(SILVER)‚öôÔ∏è  Configura√ß√£o: 30 requests, 200 concurrent$(NC)"
	@TEST_REQUESTS=30 CONCURRENT_REQUESTS=200 $(BENCHMARK_SCRIPT) simple
	@make _show-summary

# =============================================================================
# RELAT√ìRIOS E LOGS
# =============================================================================

## üìÑ Visualizar √∫ltimo relat√≥rio gerado
report:
	@if [ -z "$(LATEST_REPORT)" ]; then \
		echo "$(RED)‚ùå Nenhum relat√≥rio encontrado$(NC)"; \
		exit 1; \
	fi
	@echo "$(CYAN)üìÑ √öltimo relat√≥rio: $(LATEST_REPORT)$(NC)"
	@echo "$(SILVER)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"
	@cat $(LATEST_REPORT)

## üìã Ver logs da aplica√ß√£o
logs:
	@echo "$(CYAN)üìã Logs das aplica√ß√µes:$(NC)"
	@echo "$(SILVER)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"
	@for log in /tmp/app-*.log; do \
		if [ -f "$$log" ]; then \
			echo "$(AMBER)üìÑ $$log:$(NC)"; \
			tail -20 "$$log" 2>/dev/null || echo "$(SILVER)  (vazio)$(NC)"; \
			echo ""; \
		fi; \
	done

## üóëÔ∏è Limpar relat√≥rios antigos (manter √∫ltimos 5)
clean-reports:
	@echo "$(SILVER)üóëÔ∏è  Limpando relat√≥rios antigos...$(NC)"
	@ls -t performance-report-*.txt 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
	@ls -1 performance-report-*.txt 2>/dev/null | wc -l | xargs -I {} echo "$(GREEN)‚úÖ Mantidos {} relat√≥rios$(NC)"

# =============================================================================
# UTILIT√ÅRIOS
# =============================================================================

## üìä Status do projeto
status:
	@echo "$(CYAN)üìä Status do Projeto$(NC)"
	@echo "$(SILVER)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"
	@echo "$(GREEN)üèóÔ∏è  Build:$(NC)"
	@if [ -f "$(JAR_FILE)" ]; then \
		echo "  ‚úÖ JAR compilado: $(JAR_FILE)"; \
		echo "  üìÖ Modificado: $$(stat -f "%Sm" $(JAR_FILE))"; \
	else \
		echo "  ‚ùå JAR n√£o encontrado - execute 'make build'"; \
	fi
	@echo ""
	@echo "$(AMBER)üìÑ Relat√≥rios:$(NC)"
	@ls -t performance-report-*.txt 2>/dev/null | head -3 | while read report; do \
		echo "  üìã $$report"; \
	done || echo "  üìù Nenhum relat√≥rio encontrado"
	@echo ""
	@echo "$(CYAN)üîß Depend√™ncias:$(NC)"
	@printf "  curl: "; command -v curl &> /dev/null && echo "‚úÖ" || echo "‚ùå"
	@printf "  jq: "; command -v jq &> /dev/null && echo "‚úÖ" || echo "‚ùå"
	@printf "  bc: "; command -v bc &> /dev/null && echo "‚úÖ" || echo "‚ùå"
	@printf "  gdate: "; command -v gdate &> /dev/null && echo "‚úÖ" || echo "‚ùå"
	@echo ""
	@echo "$(PURPLE)üèÉ Processos ativos:$(NC)"
	@pgrep -f "java-virtual-threads-sample" | wc -l | xargs -I {} echo "  üîÑ {} aplica√ß√µes rodando"

## üíÄ Matar aplica√ß√µes em execu√ß√£o
kill-apps:
	@echo "$(SILVER)üíÄ Matando aplica√ß√µes em execu√ß√£o...$(NC)"
	@pkill -f "java-virtual-threads-sample" 2>/dev/null || echo "$(SILVER)  Nenhuma aplica√ß√£o rodando$(NC)"
	@sleep 2
	@echo "$(GREEN)‚úÖ Aplica√ß√µes finalizadas$(NC)"

# =============================================================================
# TARGETS INTERNOS
# =============================================================================

## Target interno para mostrar resumo ap√≥s benchmark
_show-summary:
	@echo ""
	@echo "$(GREEN)‚ú® BENCHMARK CONCLU√çDO!$(NC)"
	@echo "$(CYAN)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"
	@if [ -n "$(LATEST_REPORT)" ]; then \
		echo "$(AMBER)üìÑ Relat√≥rio: $(LATEST_REPORT)$(NC)"; \
		echo "$(SILVER)üí° Use 'make report' para visualizar$(NC)"; \
	fi
	@echo "$(CYAN)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"

# =============================================================================
# TARGETS PARA DESENVOLVIMENTO
# =============================================================================

## üîÑ Watch mode - recompila automaticamente
watch:
	@echo "$(CYAN)üîÑ Modo watch ativado - recompilando automaticamente...$(NC)"
	@echo "$(SILVER)üí° Pressione Ctrl+C para sair$(NC)"
	@./gradlew build --continuous -x test

## üêõ Executar aplica√ß√£o em modo debug
debug:
	@echo "$(CYAN)üêõ Iniciando aplica√ß√£o em modo debug...$(NC)"
	@echo "$(SILVER)üîå Debug port: 5005$(NC)"
	@java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 \
		-jar $(JAR_FILE) --spring.profiles.active=mvc-traditional

## üìà Benchmark com profiler
profile: build
	@echo "$(CYAN)üìà Executando benchmark com profiler...$(NC)"
	@echo "$(SILVER)‚ö†Ô∏è  Requer VisualVM ou JProfiler$(NC)"
	@JAVA_OPTS="-XX:+FlightRecorder -XX:StartFlightRecording=duration=60s,filename=benchmark.jfr" \
		$(BENCHMARK_SCRIPT) simple

# =============================================================================
# VALIDA√á√ïES
# =============================================================================

## ‚úÖ Verificar se o ambiente est√° pronto
check-env: 
	@echo "$(CYAN)‚úÖ Verificando ambiente...$(NC)"
	@command -v java &> /dev/null || (echo "$(RED)‚ùå Java n√£o encontrado$(NC)" && exit 1)
	@java -version 2>&1 | grep -q "21\." || echo "$(AMBER)‚ö†Ô∏è  Java 21 recomendado$(NC)"
	@command -v ./gradlew &> /dev/null || (echo "$(RED)‚ùå Gradle wrapper n√£o encontrado$(NC)" && exit 1)
	@[ -f "$(BENCHMARK_SCRIPT)" ] || (echo "$(RED)‚ùå Script de benchmark n√£o encontrado$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Ambiente configurado corretamente$(NC)"

# Garantir que o script tenha permiss√£o de execu√ß√£o
$(BENCHMARK_SCRIPT):
	@chmod +x $(BENCHMARK_SCRIPT)
